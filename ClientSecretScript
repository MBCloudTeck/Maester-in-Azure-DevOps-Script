<#
.SYNOPSIS
  Automates Azure AD App Registration with Microsoft Graph, Exchange Online, and Azure RBAC permissions.
.DESCRIPTION
  Refactored for automation and robust error handling. Accepts all inputs as parameters.
#>

param(
    [Parameter(Mandatory)]
    [string]$AppName,

    [Parameter()]
    [bool]$IncludeExchangePermissions = $false,

    [Parameter()]
    [bool]$IncludeAzurePermissions = $false
)

function Show-StepProgress {
    param(
        [int]$Step,
        [int]$TotalSteps,
        [string]$Status
    )
    if ($TotalSteps -gt 0 -and $Step -le $TotalSteps) {
        $percentComplete = [math]::Min([math]::Max([int](($Step / $TotalSteps) * 100), 0), 100)
    } else {
        $percentComplete = 0
    }
    try {
        Write-Progress -Activity "Maester App Registration Script" -Status $Status -PercentComplete $percentComplete
    } catch {
        Write-Progress -Activity "Maester App Registration Script" -Status $Status
    }
}

function Ensure-Module {
    param (
        [string]$ModuleName,
        [string]$StatusMessage,
        [int]$Step,
        [int]$TotalSteps
    )
    Show-StepProgress -Step $Step -TotalSteps $TotalSteps -Status $StatusMessage
    if (-not (Get-Module -ListAvailable -Name $ModuleName)) {
        Write-Host "$ModuleName module not found. Installing..."
        Write-Progress -Activity "Maester App Registration Script" -Status "Downloading $ModuleName..." -PercentComplete 30
        Start-Sleep -Seconds 1
        try {
            Install-Module -Name $ModuleName -Scope CurrentUser -Force -AllowClobber -ErrorAction Stop
            Write-Host "$ModuleName module installed successfully."
            Write-Progress -Activity "Maester App Registration Script" -Status "Installed $ModuleName." -PercentComplete 100
            Start-Sleep -Seconds 1
        } catch {
            Write-Error "Failed to install $ModuleName. $_"
            Write-Progress -Activity "Maester App Registration Script" -Status "Failed to install $ModuleName." -PercentComplete 100
            Start-Sleep -Seconds 1
            return $false
        }
    } else {
        Write-Host "$ModuleName module is already installed. Skipping installation."
    }
    return $true
}

function Import-ModuleSafe {
    param (
        [string]$ModuleName,
        [string]$StatusMessage,
        [int]$Step,
        [int]$TotalSteps
    )
    Show-StepProgress -Step $Step -TotalSteps $TotalSteps -Status $StatusMessage
    try {
        Import-Module $ModuleName -ErrorAction Stop
        Write-Host "$ModuleName module imported."
        return $true
    } catch {
        Write-Error "Failed to import $ModuleName. $_"
        return $false
    }
}

function Connect-GraphWithScopes {
    param([string[]]$Scopes, [int]$Step, [int]$TotalSteps)
    Show-StepProgress -Step $Step -TotalSteps $TotalSteps -Status "Connecting to Microsoft Graph"
    try {
        $context = Connect-MgGraph -Scopes $Scopes
        Write-Host "Successfully connected to Microsoft Graph."
        return $context
    } catch {
        Write-Error "Failed to connect to Microsoft Graph. $_"
        return $null
    }
}

function Get-RequiredScopes {
    return @(
        "Application.ReadWrite.All","Directory.ReadWrite.All","AppRoleAssignment.ReadWrite.All",
        "Policy.Read.All","User.Read.All","Organization.Read.All"
    )
}

function Main {
    param(
        [string]$AppName,
        [bool]$IncludeExchangePermissions,
        [bool]$IncludeAzurePermissions
    )
    $TotalSteps = 9
    $CurrentStep = 1

    try {
        Write-Host "`n--- Maester App Registration Script ---`n"

        # Ensure Graph module
        if (-not (Ensure-Module -ModuleName "Microsoft.Graph" -StatusMessage "Checking/Installing Microsoft Graph module" -Step $CurrentStep -TotalSteps $TotalSteps)) { return $false }
        $CurrentStep++

        if (-not (Import-ModuleSafe -ModuleName "Microsoft.Graph" -StatusMessage "Importing Microsoft Graph module" -Step $CurrentStep -TotalSteps $TotalSteps)) { return $false }
        $CurrentStep++

        # Connect to Microsoft Graph
        $RequiredScopes = Get-RequiredScopes
        $graphContext = Connect-GraphWithScopes -Scopes $RequiredScopes -Step $CurrentStep -TotalSteps $TotalSteps
        if (-not $graphContext) { return $false }
        $CurrentStep++

        # Get tenant context
        Show-StepProgress -Step $CurrentStep -TotalSteps $TotalSteps -Status "Verifying signed-in tenant context"
        $tenant = Get-MgOrganization | Select-Object -First 1
        if (-not $tenant) { Write-Error "Unable to determine signed-in tenant."; return $false }
        $tenantId = $tenant.Id
        Write-Host "Signed-in Tenant ID: $tenantId"
        $CurrentStep++

        # Privilege check
        Show-StepProgress -Step $CurrentStep -TotalSteps $TotalSteps -Status "Checking admin privileges"
        $User = (Get-MgContext).Account
        $DirectoryRoles = Get-MgDirectoryRole
        $IsAdmin = $false
        foreach ($role in $DirectoryRoles) {
            try {
                $members = Get-MgDirectoryRoleMember -DirectoryRoleId $role.Id
                if ($members.AdditionalProperties.userPrincipalName -contains $User) {
                    if ($role.DisplayName -match 'Global Administrator|Application Administrator|Cloud Application Administrator') {
                        $IsAdmin = $true; break
                    }
                }
            } catch {}
        }
        if (-not $IsAdmin) { Write-Error "Insufficient privileges. You must have 'Global Administrator', 'Application Administrator', or 'Cloud Application Administrator' role."; return $false }
        $CurrentStep++

        # Create App Registration
        Show-StepProgress -Step $CurrentStep -TotalSteps $TotalSteps -Status "Creating app registration"
        Write-Host "Creating app registration '$AppName'..."
        $app = New-MgApplication -DisplayName $AppName
        $appId = $app.AppId
        $appObjectId = $app.Id
        Write-Host "App registration created. App ID: $appId"
        Start-Sleep -Seconds 90
        $appValidate = Get-MgApplication -ApplicationId $appId
        if ($appValidate -eq $null -or $appValidate.Id -ne $appObjectId) { Write-Error "App registration not found in current tenant. Please check your session and tenant context."; return $false }
        $sp = New-MgServicePrincipal -AppId $appId
        $spObjectId = $sp.Id
        Write-Host "Service principal created. Object ID: $spObjectId"
        $CurrentStep++

        # Assign permissions
        Show-StepProgress -Step $CurrentStep -TotalSteps $TotalSteps -Status "Assigning API permissions"
        $permissionsRequired = @(
            "DeviceManagementConfiguration.Read.All",
            "DeviceManagementManagedDevices.Read.All",
            "Directory.Read.All",
            "DirectoryRecommendations.Read.All",
            "IdentityRiskEvent.Read.All",
            "Policy.Read.All",
            "Policy.Read.ConditionalAccess",
            "PrivilegedAccess.Read.AzureAD",
            "Reports.Read.All",
            "RoleEligibilitySchedule.Read.Directory",
            "RoleManagement.Read.All",
            "SharePointTenantSettings.Read.All",
            "UserAuthenticationMethod.Read.All"
        )
        $graphAppId = "00000003-0000-0000-c000-000000000000"
        $graphSp = Get-MgServicePrincipal -Filter "AppId eq '$graphAppId'"
        $resourceAccessList = @()
        foreach ($perm in $permissionsRequired) {
            $role = $graphSp.AppRoles | Where-Object { $_.Value -eq $perm -and $_.AllowedMemberTypes -contains "Application" }
            if ($role) {
                $resourceAccessList += [Microsoft.Graph.PowerShell.Models.MicrosoftGraphResourceAccess]@{ Id = $role.Id; Type = "Role" }
            }
        }
        $requiredResourceAccess = @(
            [Microsoft.Graph.PowerShell.Models.MicrosoftGraphRequiredResourceAccess]@{
                ResourceAppId  = $graphSp.AppId
                ResourceAccess = $resourceAccessList
            }
        )
        if ($IncludeExchangePermissions) {
            Write-Host "Adding Exchange Online application permission (Exchange.ManageAsApp)..."
            $exchangeAppId = "00000002-0000-0ff1-ce00-000000000000"
            $exchangeSp = Get-MgServicePrincipal -Filter "AppId eq '$exchangeAppId'"
            $exRole = $exchangeSp.AppRoles | Where-Object { $_.Value -eq "Exchange.ManageAsApp" -and $_.AllowedMemberTypes -contains "Application" }
            $exResourceAccess = [Microsoft.Graph.PowerShell.Models.MicrosoftGraphResourceAccess]@{ Id = $exRole.Id; Type = "Role" }
            $requiredResourceAccess += [Microsoft.Graph.PowerShell.Models.MicrosoftGraphRequiredResourceAccess]@{
                ResourceAppId  = $exchangeSp.AppId
                ResourceAccess = @($exResourceAccess)
            }
        }
        Update-MgApplication -ApplicationId $appObjectId -RequiredResourceAccess $requiredResourceAccess
        Write-Host "Permissions updated."
        $CurrentStep++

        # Grant admin consent
        Write-Host "Granting admin consent..."
        foreach ($block in $requiredResourceAccess) {
            $spForResource = Get-MgServicePrincipal -Filter "AppId eq '$($block.ResourceAppId)'"
            foreach ($role in $block.ResourceAccess) {
                New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $spObjectId -ResourceId $spForResource.Id -AppRoleId $role.Id -PrincipalId $spObjectId | Out-Null
                Write-Host "Admin consent granted for: $($role.Value) (ID: $($role.Id))"
            }
        }
        Write-Host "Waiting $AzureADPropagationWaitTime seconds for Azure AD propagation..."
        Start-Sleep -Seconds $AzureADPropagationWaitTime

        # Connect to Exchange Online if requested
        if ($IncludeExchangePermissions) {
            if (-not (Ensure-Module -ModuleName "ExchangeOnlineManagement" -StatusMessage "Checking/Installing Exchange Online module" -Step $CurrentStep -TotalSteps $TotalSteps)) { return $false }
            if (-not (Import-ModuleSafe -ModuleName "ExchangeOnlineManagement" -StatusMessage "Importing Exchange Online module" -Step $CurrentStep -TotalSteps $TotalSteps)) { return $false }
            try {
                $Org = Get-MgOrganization | Where-Object { $_.Id -eq $tenantId }
                $orgDomain = $Org.VerifiedDomains | Where-Object { $_.Initial -eq $true } | Select-Object -First 1
                if (-not $orgDomain) { $orgDomain = $Org.VerifiedDomains | Select-Object -First 1 }
                if (-not $orgDomain) { Write-Error "Cannot determine organization domain for Exchange Online connection."; return $false }
                Connect-ExchangeOnline -AppId $appId -Organization $orgDomain.Name -ShowProgress:$false
                Write-Host "Connected to Exchange Online via app-only authentication."
            } catch {
                Write-Error "Failed to connect to Exchange Online: $_"
                return $false
            }
        }
        Start-Sleep -Seconds $SleepDuration
        $CurrentStep++

        # Azure RBAC if requested
        if ($IncludeAzurePermissions) {
            if (-not (Ensure-Module -ModuleName "Az.Accounts" -StatusMessage "Checking/Installing Az.Accounts module" -Step $CurrentStep -TotalSteps $TotalSteps)) { return $false }
            if (-not (Ensure-Module -ModuleName "Az.Resources" -StatusMessage "Checking/Installing Az.Resources module" -Step $CurrentStep -TotalSteps $TotalSteps)) { return $false }
            if (-not (Import-ModuleSafe -ModuleName "Az.Accounts" -StatusMessage "Importing Az.Accounts module" -Step $CurrentStep -TotalSteps $TotalSteps)) { return $false }
            if (-not (Import-ModuleSafe -ModuleName "Az.Resources" -StatusMessage "Importing Az.Resources module" -Step $CurrentStep -TotalSteps $TotalSteps)) { return $false }
            try {
                Connect-AzAccount -ErrorAction Stop
                Write-Host "Connected to Azure."
                Write-Host "Elevating access to root scope (if required)..."
                Invoke-AzRestMethod -Path "/providers/Microsoft.Authorization/elevateAccess?api-version=2015-07-01" -Method POST | Out-Null
                Write-Host "Assigning Reader role at root scope and Entra ID provider scope..."
                New-AzRoleAssignment -ObjectId $spObjectId -Scope "/" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"
                New-AzRoleAssignment -ObjectId $spObjectId -Scope "/providers/Microsoft.aadiam" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"
            } catch {
                Write-Error "Azure RBAC assignment or elevation failed: $_"
                return $false
            }
        }
        $CurrentStep++

        # Create client secret
        Show-StepProgress -Step $TotalSteps -TotalSteps $TotalSteps -Status "Creating client secret"
        Write-Host "Creating client secret..."
        $secret = Add-MgApplicationPassword -ApplicationId $appObjectId -PasswordCredential @{
            DisplayName   = "maesterappsecret"
            StartDateTime = (Get-Date).ToUniversalTime()
            EndDateTime   = (Get-Date).AddMonths(6).ToUniversalTime()
        }
        Write-Warning "Copy the client secret now. You will NOT be able to view it later!"

        # Output details as object for further scripting
        $result = [PSCustomObject]@{
            TenantId     = $tenantId
            AppId        = $appId
            ClientSecret = $secret.SecretText
        }
        $result | Format-List
        return $true
    } catch {
        Write-Error "Unexpected error: $_"
        return $false
    }
}

# Run Main
Main -AppName $AppName -IncludeExchangePermissions:$IncludeExchangePermissions -IncludeAzurePermissions:$IncludeAzurePermissions
