<#
.DESCRIPTION
  This script:
    - Creates a new App Registration in Microsoft Entra ID (Azure AD).
    - Assigns required Microsoft Graph permissions.
    - Grants admin consent automatically.
    - Adds optional Exchange Online permissions.
    - Adds optional Azure RBAC permissions.
    - Generates a client secret valid for 6 months.
    - Outputs important information for future use.

.REQUIREMENTS
  - Microsoft Graph PowerShell Module installed.
  - Az PowerShell Module installed (if using Azure RBAC).
  - ExchangeOnlineManagement Module installed (if using Exchange Online).
  - Connect to Microsoft Graph and Azure with necessary privileges.

.BEGINNER GUIDE
  This script sets up an application that can access Microsoft Graph, optionally Exchange Online, and optionally Azure RBAC resources.
#>

# ====================
# PREREQUISITES
# ====================

# 1. Microsoft Graph Module
if (-not (Get-Module -ListAvailable -Name Microsoft.Graph)) {
    Write-Host "Microsoft Graph PowerShell module not found. Installing..."
    try { Install-Module -Name Microsoft.Graph -Scope CurrentUser -Force -AllowClobber }
    catch { Write-Error "Failed to install Microsoft Graph PowerShell module. Please install manually and re-run."; return }
}
Import-Module Microsoft.Graph -ErrorAction Stop

# 2. Connect to Microsoft Graph with required scopes
$RequiredScopes = @(
    "Application.ReadWrite.All","Directory.ReadWrite.All","AppRoleAssignment.ReadWrite.All",
    "Policy.Read.All","User.Read.All","Organization.Read.All"
)
try {
    $context = Get-MgContext
    if (-not $context.Account -or ($RequiredScopes | Where-Object { $_ -notin $context.Scopes })) {
        throw "Not connected or missing scopes."
    }
} catch {
    Write-Host "You are not connected to Microsoft Graph with required permissions. Prompting for login..."
    try { Connect-MgGraph -Scopes $RequiredScopes }
    catch { Write-Error "Failed to connect to Microsoft Graph. Please check your credentials and permissions."; return }
    $context = Get-MgContext
    if (-not $context.Account) {
        Write-Error "Still not connected to Microsoft Graph after login attempt."
        return
    }
}

# ====================
# USER CONFIGURATIONS
# ====================

# Get app name and validate
$AppName = Read-Host "Enter a friendly name for the App Registration (e.g., 'Maester DevOps Account')"
if ([string]::IsNullOrWhiteSpace($AppName)) {
    Write-Error "App name cannot be empty."
    return
}

$IncludeExchangePermissions = Read-Host "Include Exchange Online permissions? (Y/N)"
$IncludeAzurePermissions = Read-Host "Include Azure RBAC permissions? (Y/N)"

# ====================
# ADMIN PRIVILEGE CHECK
# ====================

Write-Host "Checking your admin privileges..."
$User = (Get-MgContext).Account
$DirectoryRoles = Get-MgDirectoryRole
$IsAdmin = $false
foreach ($role in $DirectoryRoles) {
    try {
        $members = Get-MgDirectoryRoleMember -DirectoryRoleId $role.Id
        if ($members.AdditionalProperties.userPrincipalName -contains $User) {
            if ($role.DisplayName -match 'Global Administrator|Application Administrator|Cloud Application Administrator') {
                $IsAdmin = $true
                break
            }
        }
    } catch {}
}
if (-not $IsAdmin) {
    Write-Error "Insufficient privileges. You must have 'Global Administrator', 'Application Administrator', or 'Cloud Application Administrator' role."
    return
}

# ====================
# CREATE APP REGISTRATION
# ====================

Write-Host "Creating app registration '$AppName'..."
$app = New-MgApplication -DisplayName $AppName
$appId = $app.AppId
$appObjectId = $app.Id
Write-Host "App registration created. App ID: $appId"

# Create Service Principal
$sp = New-MgServicePrincipal -AppId $appId
$spObjectId = $sp.Id
Write-Host "Service principal created. Object ID: $spObjectId"

# ====================
# OPTIONAL: EXCHANGE ONLINE
# ====================
if ($IncludeExchangePermissions -match "^(y|Y)$") {
    Write-Host "Installing and importing ExchangeOnlineManagement module if not present..."
    if (-not (Get-Module -ListAvailable -Name ExchangeOnlineManagement)) {
        try { Install-Module -Name ExchangeOnlineManagement -Force -Scope CurrentUser }
        catch { Write-Error "Failed to install ExchangeOnlineManagement module: $_"; return }
    }
    try { Import-Module ExchangeOnlineManagement -ErrorAction Stop }
    catch { Write-Error "Failed to import ExchangeOnlineManagement module: $_"; return }

    try {
        $Org = Get-MgOrganization
        Connect-ExchangeOnline -AppId $appId -Organization $Org.VerifiedDomains[0].Name -ShowProgress:$false
        Write-Host "Connected to Exchange Online."
        # Add your Exchange Online role assignment logic here if needed
        # Example placeholders:
        # New-ServicePrincipal -AppId $appId -ObjectId $spObjectId -DisplayName $AppName
        # New-ManagementRoleAssignment -Role "View-Only Configuration" -App $AppName
    } catch {
        Write-Error "Failed to connect to Exchange Online: $_"
        return
    }
}

# ====================
# REQUIRED PERMISSIONS
# ====================
$permissionsRequired = @(
    "DeviceManagementConfiguration.Read.All",
    "DeviceManagementManagedDevices.Read.All",
    "Directory.Read.All",
    "DirectoryRecommendations.Read.All",
    "IdentityRiskEvent.Read.All",
    "Policy.Read.All",
    "Policy.Read.ConditionalAccess",
    "PrivilegedAccess.Read.AzureAD",
    "Reports.Read.All",
    "RoleEligibilitySchedule.Read.Directory",
    "RoleManagement.Read.All",
    "SharePointTenantSettings.Read.All",
    "UserAuthenticationMethod.Read.All"
)

Write-Host "Assigning Microsoft Graph permissions..."
$graphAppId = "00000003-0000-0000-c000-000000000000"
$graphSp = Get-MgServicePrincipal -Filter "AppId eq '$graphAppId'"
$resourceAccessList = @()
foreach ($perm in $permissionsRequired) {
    $role = $graphSp.AppRoles | Where-Object { $_.Value -eq $perm -and $_.AllowedMemberTypes -contains "Application" }
    if ($role) {
        $resourceAccessList += [Microsoft.Graph.PowerShell.Models.MicrosoftGraphResourceAccess]@{
            Id   = $role.Id
            Type = "Role"
        }
    }
}

$requiredResourceAccess = [Microsoft.Graph.PowerShell.Models.MicrosoftGraphRequiredResourceAccess]@{
    ResourceAppId  = $graphSp.AppId
    ResourceAccess = $resourceAccessList
}
Update-MgApplication -ApplicationId $appObjectId -RequiredResourceAccess @($requiredResourceAccess)
Write-Host "Permissions updated."

# ====================
# GRANT ADMIN CONSENT
# ====================
Write-Host "Granting admin consent..."
foreach ($perm in $permissionsRequired) {
    $role = $graphSp.AppRoles | Where-Object { $_.Value -eq $perm -and $_.AllowedMemberTypes -contains "Application" }
    if ($role) {
        New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $spObjectId -ResourceId $graphSp.Id -AppRoleId $role.Id -PrincipalId $spObjectId | Out-Null
        Write-Host "Admin consent granted for: $perm"
    }
}

# ====================
# OPTIONAL: AZURE RBAC
# ====================
if ($IncludeAzurePermissions -match "^(y|Y)$") {
    Write-Host "Installing and importing Az modules if not present..."
    if (-not (Get-Module -ListAvailable -Name Az.Accounts)) {
        try { Install-Module Az.Accounts -Force -Scope CurrentUser }
        catch { Write-Error "Failed to install Az.Accounts: $_"; return }
    }
    if (-not (Get-Module -ListAvailable -Name Az.Resources)) {
        try { Install-Module Az.Resources -Force -Scope CurrentUser }
        catch { Write-Error "Failed to install Az.Resources: $_"; return }
    }
    try {
        Import-Module Az.Accounts -ErrorAction Stop
        Import-Module Az.Resources -ErrorAction Stop
        Connect-AzAccount -ErrorAction Stop
        Write-Host "Connected to Azure."
    } catch {
        Write-Error "Failed to connect to Azure: $_"
        return
    }

    # Assign Reader role at root and AAD provider scope
    try {
        Write-Host "Elevating access to root scope (if required)..."
        Invoke-AzRestMethod -Path "/providers/Microsoft.Authorization/elevateAccess?api-version=2015-07-01" -Method POST | Out-Null
        Write-Host "Assigning Reader role at root scope and Entra ID provider scope..."
        New-AzRoleAssignment -ObjectId $spObjectId -Scope "/" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"
        New-AzRoleAssignment -ObjectId $spObjectId -Scope "/providers/Microsoft.aadiam" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"
        Write-Host "Removing your own elevated root scope access..."
        # (Optional: Clean up elevation if desired; adjust logic as needed)
    } catch {
        Write-Error "RBAC assignment or elevation failed: $_"
        return
    }
}

# ====================
# CLIENT SECRET
# ====================
Write-Host "Creating client secret..."
$secret = Add-MgApplicationPassword -ApplicationId $appObjectId -PasswordCredential @{
    DisplayName   = "entraidappsecret"
    StartDateTime = (Get-Date).ToUniversalTime()
    EndDateTime   = (Get-Date).AddMonths(6).ToUniversalTime()
}
Write-Warning "Copy the client secret now. You will NOT be able to view it later!"

# ====================
# OUTPUT DETAILS
# ====================
$tenantId = (Get-MgOrganization).Id
Write-Host ""
Write-Host "============================================="
Write-Host "APP REGISTRATION CREATED SUCCESSFULLY"
Write-Host "Tenant ID:     $tenantId"
Write-Host "App ID:        $appId"
Write-Host "Client Secret: $($secret.SecretText)"
Write-Host "============================================="
