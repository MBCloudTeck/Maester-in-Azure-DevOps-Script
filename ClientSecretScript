<#
.DESCRIPTION
  Creates a new App Registration in Microsoft Entra ID (Azure AD), assigns Microsoft Graph and optionally Exchange Online and Azure RBAC permissions, grants admin consent, creates a client secret, and outputs the relevant details.

.REQUIREMENTS
  - PowerShell 7+
  - Microsoft Graph PowerShell Module
  - ExchangeOnlineManagement Module (if using Exchange Online)
  - Az PowerShell Module (if using Azure RBAC)
  - Privileged Azure AD account (Directory/Application/Global/Cloud App Admin)
  - Internet access

#>

function Show-StepProgress {
    param(
        [int]$Step,
        [int]$TotalSteps,
        [string]$Status
    )
    $percentComplete = [int](($Step / $TotalSteps) * 100)
    Write-Progress -Activity "Maester App Registration Script" -Status $Status -PercentComplete $percentComplete
}

function Ensure-Module {
    param (
        [string]$ModuleName,
        [string]$StatusMessage,
        [int]$Step,
        [int]$TotalSteps
    )
    Show-StepProgress -Step $Step -TotalSteps $TotalSteps -Status $StatusMessage
    if (-not (Get-Module -ListAvailable -Name $ModuleName)) {
        Write-Host "$ModuleName module not found. Installing..."
        Write-Progress -Activity "Maester App Registration Script" -Status "Downloading $ModuleName..." -PercentComplete 30
        Start-Sleep -Seconds 1
        try {
            Install-Module -Name $ModuleName -Scope CurrentUser -Force -AllowClobber -ErrorAction Stop
            Write-Host "$ModuleName module installed successfully."
            Write-Progress -Activity "Maester App Registration Script" -Status "Installed $ModuleName." -PercentComplete 100
            Start-Sleep -Seconds 1
        } catch {
            Write-Error "Failed to install $ModuleName. $_"
            Write-Progress -Activity "Maester App Registration Script" -Status "Failed to install $ModuleName." -PercentComplete 100
            Start-Sleep -Seconds 1
            return $false
        }
    } else {
        Write-Host "$ModuleName module is already installed. Skipping installation."
    }
    return $true
}

function Import-ModuleSafe {
    param (
        [string]$ModuleName,
        [string]$StatusMessage,
        [int]$Step,
        [int]$TotalSteps
    )
    Show-StepProgress -Step $Step -TotalSteps $TotalSteps -Status $StatusMessage
    try {
        Import-Module $ModuleName -ErrorAction Stop
        Write-Host "$ModuleName module imported."
        return $true
    } catch {
        Write-Error "Failed to import $ModuleName. $_"
        return $false
    }
}

function Connect-GraphWithScopes {
    param([string[]]$Scopes, [int]$Step, [int]$TotalSteps)
    Show-StepProgress -Step $Step -TotalSteps $TotalSteps -Status "Connecting to Microsoft Graph"
    try {
        Connect-MgGraph -Scopes $Scopes
        Write-Host "Successfully connected to Microsoft Graph."
        return $true
    } catch {
        Write-Error "Failed to connect to Microsoft Graph. $_"
        return $false
    }
}

function Get-RequiredScopes {
    return @(
        "Application.ReadWrite.All","Directory.ReadWrite.All","AppRoleAssignment.ReadWrite.All",
        "Policy.Read.All","User.Read.All","Organization.Read.All"
    )
}

# ==== MAIN SCRIPT ====
$TotalSteps = 8
$CurrentStep = 1

Write-Host "`n--- Maester App Registration Script ---`n"

# Ensure Graph module
if (-not (Ensure-Module -ModuleName "Microsoft.Graph" -StatusMessage "Checking/Installing Microsoft Graph module" -Step $CurrentStep -TotalSteps $TotalSteps)) { Write-Progress -Activity "Maester App Registration Script" -Completed; return }
$CurrentStep++

if (-not (Import-ModuleSafe -ModuleName "Microsoft.Graph" -StatusMessage "Importing Microsoft Graph module" -Step $CurrentStep -TotalSteps $TotalSteps)) { Write-Progress -Activity "Maester App Registration Script" -Completed; return }
$CurrentStep++

# Connect to Microsoft Graph
$RequiredScopes = Get-RequiredScopes
if (-not (Connect-GraphWithScopes -Scopes $RequiredScopes -Step $CurrentStep -TotalSteps $TotalSteps)) { Write-Progress -Activity "Maester App Registration Script" -Completed; return }
$CurrentStep++

# Get app name and options
Show-StepProgress -Step $CurrentStep -TotalSteps $TotalSteps -Status "Collecting user input"
$AppName = Read-Host "Enter a friendly name for the App Registration (e.g., 'Maester DevOps Account')"
if ([string]::IsNullOrWhiteSpace($AppName)) {
    Write-Error "App name cannot be empty."
    Write-Progress -Activity "Maester App Registration Script" -Completed
    return
}
$IncludeExchangePermissions = Read-Host "Include Exchange Online permissions? (Y/N)"
$IncludeAzurePermissions = Read-Host "Include Azure RBAC permissions? (Y/N)"
$CurrentStep++

# Privilege check
Show-StepProgress -Step $CurrentStep -TotalSteps $TotalSteps -Status "Checking admin privileges"
$User = (Get-MgContext).Account
$DirectoryRoles = Get-MgDirectoryRole
$IsAdmin = $false
foreach ($role in $DirectoryRoles) {
    try {
        $members = Get-MgDirectoryRoleMember -DirectoryRoleId $role.Id
        if ($members.AdditionalProperties.userPrincipalName -contains $User) {
            if ($role.DisplayName -match 'Global Administrator|Application Administrator|Cloud Application Administrator') {
                $IsAdmin = $true
                break
            }
        }
    } catch {}
}
if (-not $IsAdmin) {
    Write-Error "Insufficient privileges. You must have 'Global Administrator', 'Application Administrator', or 'Cloud Application Administrator' role."
    Write-Progress -Activity "Maester App Registration Script" -Completed
    return
}
$CurrentStep++

# Create App Registration
Show-StepProgress -Step $CurrentStep -TotalSteps $TotalSteps -Status "Creating app registration"
Write-Host "Creating app registration '$AppName'..."
$app = New-MgApplication -DisplayName $AppName
$appId = $app.AppId
$appObjectId = $app.Id
Write-Host "App registration created. App ID: $appId"
$sp = New-MgServicePrincipal -AppId $appId
$spObjectId = $sp.Id
Write-Host "Service principal created. Object ID: $spObjectId"
$CurrentStep++

# Assign permissions (Graph and optionally Exchange Online)
Show-StepProgress -Step $CurrentStep -TotalSteps $TotalSteps -Status "Assigning API permissions"
$permissionsRequired = @(
    "DeviceManagementConfiguration.Read.All",
    "DeviceManagementManagedDevices.Read.All",
    "Directory.Read.All",
    "DirectoryRecommendations.Read.All",
    "IdentityRiskEvent.Read.All",
    "Policy.Read.All",
    "Policy.Read.ConditionalAccess",
    "PrivilegedAccess.Read.AzureAD",
    "Reports.Read.All",
    "RoleEligibilitySchedule.Read.Directory",
    "RoleManagement.Read.All",
    "SharePointTenantSettings.Read.All",
    "UserAuthenticationMethod.Read.All"
)
$graphAppId = "00000003-0000-0000-c000-000000000000"
$graphSp = Get-MgServicePrincipal -Filter "AppId eq '$graphAppId'"
$resourceAccessList = @()
foreach ($perm in $permissionsRequired) {
    $role = $graphSp.AppRoles | Where-Object { $_.Value -eq $perm -and $_.AllowedMemberTypes -contains "Application" }
    if ($role) {
        $resourceAccessList += [Microsoft.Graph.PowerShell.Models.MicrosoftGraphResourceAccess]@{
            Id   = $role.Id
            Type = "Role"
        }
    }
}
$requiredResourceAccess = @(
    [Microsoft.Graph.PowerShell.Models.MicrosoftGraphRequiredResourceAccess]@{
        ResourceAppId  = $graphSp.AppId
        ResourceAccess = $resourceAccessList
    }
)

if ($IncludeExchangePermissions -match "^(y|Y)$") {
    Write-Host "Adding Exchange Online application permission (Exchange.ManageAsApp)..."
    $exchangeAppId = "00000002-0000-0ff1-ce00-000000000000"
    $exchangeSp = Get-MgServicePrincipal -Filter "AppId eq '$exchangeAppId'"
    $exRole = $exchangeSp.AppRoles | Where-Object { $_.Value -eq "Exchange.ManageAsApp" -and $_.AllowedMemberTypes -contains "Application" }
    $exResourceAccess = [Microsoft.Graph.PowerShell.Models.MicrosoftGraphResourceAccess]@{
        Id   = $exRole.Id
        Type = "Role"
    }
    $requiredResourceAccess += [Microsoft.Graph.PowerShell.Models.MicrosoftGraphRequiredResourceAccess]@{
        ResourceAppId  = $exchangeSp.AppId
        ResourceAccess = @($exResourceAccess)
    }
}
Update-MgApplication -ApplicationId $appObjectId -RequiredResourceAccess $requiredResourceAccess
Write-Host "Permissions updated."
$CurrentStep++

# Grant admin consent
Show-StepProgress -Step $CurrentStep -TotalSteps $TotalSteps -Status "Granting admin consent"
Write-Host "Granting admin consent..."
foreach ($block in $requiredResourceAccess) {
    $spForResource = Get-MgServicePrincipal -Filter "AppId eq '$($block.ResourceAppId)'"
    foreach ($role in $block.ResourceAccess) {
        New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $spObjectId -ResourceId $spForResource.Id -AppRoleId $role.Id -PrincipalId $spObjectId | Out-Null
        Write-Host "Admin consent granted for: $($role.Id)"
    }
}
# Wait for Azure AD propagation
Write-Host "Waiting for permissions to propagate..."
Start-Sleep -Seconds 15
$CurrentStep++

# Optional: Connect to Exchange Online (app-only)
if ($IncludeExchangePermissions -match "^(y|Y)$") {
    if (-not (Ensure-Module -ModuleName "ExchangeOnlineManagement" -StatusMessage "Checking/Installing Exchange Online module" -Step $CurrentStep -TotalSteps $TotalSteps)) { Write-Progress -Activity "Maester App Registration Script" -Completed; return }
    if (-not (Import-ModuleSafe -ModuleName "ExchangeOnlineManagement" -StatusMessage "Importing Exchange Online module" -Step $CurrentStep -TotalSteps $TotalSteps)) { Write-Progress -Activity "Maester App Registration Script" -Completed; return }
    try {
        $Org = Get-MgOrganization
        Connect-ExchangeOnline -AppId $appId -Organization $Org.VerifiedDomains[0].Name -ShowProgress:$false
        Write-Host "Connected to Exchange Online via app-only authentication."
    } catch {
        Write-Error "Failed to connect to Exchange Online: $_"
        Write-Progress -Activity "Maester App Registration Script" -Completed
        return
    }
}
$CurrentStep++

# Optional: Azure RBAC
if ($IncludeAzurePermissions -match "^(y|Y)$") {
    if (-not (Ensure-Module -ModuleName "Az.Accounts" -StatusMessage "Checking/Installing Az.Accounts module" -Step $CurrentStep -TotalSteps $TotalSteps)) { Write-Progress -Activity "Maester App Registration Script" -Completed; return }
    if (-not (Ensure-Module -ModuleName "Az.Resources" -StatusMessage "Checking/Installing Az.Resources module" -Step $CurrentStep -TotalSteps $TotalSteps)) { Write-Progress -Activity "Maester App Registration Script" -Completed; return }
    if (-not (Import-ModuleSafe -ModuleName "Az.Accounts" -StatusMessage "Importing Az.Accounts module" -Step $CurrentStep -TotalSteps $TotalSteps)) { Write-Progress -Activity "Maester App Registration Script" -Completed; return }
    if (-not (Import-ModuleSafe -ModuleName "Az.Resources" -StatusMessage "Importing Az.Resources module" -Step $CurrentStep -TotalSteps $TotalSteps)) { Write-Progress -Activity "Maester App Registration Script" -Completed; return }
    try {
        Connect-AzAccount -ErrorAction Stop
        Write-Host "Connected to Azure."
        # Assign Reader role at root and AAD provider scope
        Write-Host "Elevating access to root scope (if required)..."
        Invoke-AzRestMethod -Path "/providers/Microsoft.Authorization/elevateAccess?api-version=2015-07-01" -Method POST | Out-Null
        Write-Host "Assigning Reader role at root scope and Entra ID provider scope..."
        New-AzRoleAssignment -ObjectId $spObjectId -Scope "/" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"
        New-AzRoleAssignment -ObjectId $spObjectId -Scope "/providers/Microsoft.aadiam" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"
    } catch {
        Write-Error "Azure RBAC assignment or elevation failed: $_"
        Write-Progress -Activity "Maester App Registration Script" -Completed
        return
    }
}
$CurrentStep++

# Create client secret
Show-StepProgress -Step $TotalSteps -TotalSteps $TotalSteps -Status "Creating client secret"
Write-Host "Creating client secret..."
$secret = Add-MgApplicationPassword -ApplicationId $appObjectId -PasswordCredential @{
    DisplayName   = "maesterappsecret"
    StartDateTime = (Get-Date).ToUniversalTime()
    EndDateTime   = (Get-Date).AddMonths(6).ToUniversalTime()
}
Write-Warning "Copy the client secret now. You will NOT be able to view it later!"

# Output details
$tenantId = (Get-MgOrganization).Id
Write-Host ""
Write-Host "============================================="
Write-Host "APP REGISTRATION CREATED SUCCESSFULLY"
Write-Host "Tenant ID:     $tenantId"
Write-Host "App ID:        $appId"
Write-Host "Client Secret: $($secret.SecretText)"
Write-Host "============================================="
Write-Progress -Activity "Maester App Registration Script" -Completed
Write-Host "`n--- Script completed successfully ---`n"
