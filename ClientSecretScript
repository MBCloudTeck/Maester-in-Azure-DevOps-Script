<#
DESCRIPTION:
This script:
  - Creates a new App Registration in Microsoft Entra ID (Azure AD).
  - Assigns required Microsoft Graph permissions.
  - Grants admin consent automatically.
  - Adds optional Exchange Online permissions.
  - Adds optional Azure RBAC permissions.
  - Generates a client secret valid for 6 months.
  - Outputs important information for future use.

REQUIREMENTS:
  - Microsoft Graph PowerShell Module installed.
  - Az PowerShell Module installed.
  - Connect to Microsoft Graph and Azure with necessary privileges.

BEGINNER GUIDE:
This script sets up an application that can access Microsoft Graph, optionally Exchange Online, and optionally Azure RBAC resources. The permissions let the app read various types of data like device management details, security policies, user authentication methods, Exchange configurations, and Azure configurations.
#>

# ====================
# USER CONFIGURATIONS
# ====================

# Enter a friendly name for your app registration.
$AppName = Read-Host "Enter a friendly name for the App Registration (e.g., 'Maester DevOps Account')"

# Do you want to add Exchange Online permissions? (yes/no)
$IncludeExchangePermissions = Read-Host "Include Exchange Online permissions? (Y/N)"

# Do you want to add Azure RBAC permissions? (yes/no)
$IncludeAzurePermissions = Read-Host "Include Azure RBAC permissions? (Y/N)"

# ==========================================

# Check Microsoft Graph connection
Write-Host "Checking connection to Microsoft Graph..."
try {
    $context = Get-MgContext
    if (-not $context.Account) { throw "Not connected." }
}
catch {
    Write-Error "Not connected to Microsoft Graph. Please run Connect-MgGraph and sign in."
    return
}

# Verify admin privileges
$currentUserRoles = Get-MgDirectoryRole | Where-Object {
    (Get-MgDirectoryRoleMember -DirectoryRoleId $_.Id).AdditionalProperties.userPrincipalName -contains (Get-MgContext).Account
}

if ($currentUserRoles.DisplayName -notmatch 'Global Administrator|Application Administrator|Cloud Application Administrator') {
    Write-Error "Insufficient privileges. You must have 'Global Administrator', 'Application Administrator', or 'Cloud Application Administrator' role."
    exit
}

# Create a new App Registration
Write-Host "Creating app registration '$AppName'..."
$app = New-MgApplication -DisplayName $AppName
$appId = $app.AppId
$appObjectId = $app.Id
Write-Host "App registration created. App ID: $appId"

# Create Service Principal (used for permissions)
$sp = New-MgServicePrincipal -AppId $appId
$spObjectId = $sp.Id
Write-Host "Service principal created. Object ID: $spObjectId"

# Register Exchange Online and RBAC modules if needed
if ($IncludeExchangePermissions -match "^y$" -or $IncludeExchangePermissions -match "^Y$") {
    Write-Host "Installing Exchange Online Management module if not present..."
    try {
        if (-not (Get-Module -ListAvailable -Name ExchangeOnlineManagement)) {
            Install-Module -Name ExchangeOnlineManagement -Force -Scope CurrentUser
        }
        Import-Module ExchangeOnlineManagement -ErrorAction Stop
        Write-Host "ExchangeOnlineManagement module imported successfully."
    } catch {
        Write-Error "Failed to install or import ExchangeOnlineManagement module: $_"
        return
    }

    try {
        Connect-ExchangeOnline -AppId $appId -Organization (Get-MgOrganization).VerifiedDomains[0].Name -ShowProgress:$false
        Write-Host "Connected to Exchange Online."
    } catch {
        Write-Error "Failed to connect to Exchange Online: $_"
        return
    }
    Write-Host "Installing Exchange Online Management module if not present..."
    if (-not (Get-Module -ListAvailable -Name ExchangeOnlineManagement)) {
        Install-Module -Name ExchangeOnlineManagement -Force -Scope CurrentUser
    }
    Import-Module ExchangeOnlineManagement
    Connect-ExchangeOnline -AppId $appId -Organization (Get-MgOrganization).VerifiedDomains[0].Name -ShowProgress $false

    # Assign RBAC role to the app for Exchange Online
    New-ServicePrincipal -AppId $appId -ObjectId $spObjectId -DisplayName $AppName
    New-ManagementRoleAssignment -Role "View-Only Configuration" -App $AppName
}

# Permissions required
$permissionsRequired = @(
    "DeviceManagementConfiguration.Read.All",
    "DeviceManagementManagedDevices.Read.All",
    "Directory.Read.All",
    "DirectoryRecommendations.Read.All",
    "IdentityRiskEvent.Read.All",
    "Policy.Read.All",
    "Policy.Read.ConditionalAccess",
    "PrivilegedAccess.Read.AzureAD",
    "Reports.Read.All",
    "RoleEligibilitySchedule.Read.Directory",
    "RoleManagement.Read.All",
    "SharePointTenantSettings.Read.All",
    "UserAuthenticationMethod.Read.All"
)

# Prepare permissions
Write-Host "Assigning permissions..."
$graphAppId = "00000003-0000-0000-c000-000000000000"
$graphSp = Get-MgServicePrincipal -Filter "AppId eq '$graphAppId'"
$resourceAccessList = @()
foreach ($perm in $permissionsRequired) {
    $role = $graphSp.AppRoles | Where-Object { $_.Value -eq $perm -and $_.AllowedMemberTypes -contains "Application" }
    if ($role) {
        $resourceAccessList += [Microsoft.Graph.PowerShell.Models.MicrosoftGraphResourceAccess]@{
            Id   = $role.Id
            Type = "Role"
        }
    }
}

# Update app with permissions
$requiredResourceAccess = [Microsoft.Graph.PowerShell.Models.MicrosoftGraphRequiredResourceAccess]@{
    ResourceAppId  = $graphSp.AppId
    ResourceAccess = $resourceAccessList
}
Update-MgApplication -ApplicationId $appObjectId -RequiredResourceAccess @($requiredResourceAccess)
Write-Host "Permissions updated."

# Grant admin consent automatically
Write-Host "Granting admin consent..."
foreach ($perm in $permissionsRequired) {
    $role = $graphSp.AppRoles | Where-Object { $_.Value -eq $perm -and $_.AllowedMemberTypes -contains "Application" }
    if ($role) {
        New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $spObjectId -ResourceId $graphSp.Id -AppRoleId $role.Id -PrincipalId $spObjectId | Out-Null
        Write-Host "Admin consent granted for: $perm"
    }
}

# OPTIONAL: Add Azure RBAC permissions
if ($IncludeAzurePermissions -match "^y$" -or $IncludeAzurePermissions -match "^Y$") {
    Write-Host "Installing Az modules if not present..."
    try {
        Install-Module Az.Accounts -Force -Scope CurrentUser
        Install-Module Az.Resources -Force -Scope CurrentUser
        Import-Module Az.Accounts -ErrorAction Stop
        Import-Module Az.Resources -ErrorAction Stop
        Write-Host "Az modules imported successfully."
    } catch {
        Write-Error "Failed to install or import Az modules: $_"
        return
    }

    try {
        Connect-AzAccount -ErrorAction Stop
        Write-Host "Connected to Azure."
    } catch {
        Write-Error "Failed to connect to Azure: $_"
        return
    }
    Write-Host "Installing Az modules if not present..."
    Install-Module Az.Accounts -Force -Scope CurrentUser
    Install-Module Az.Resources -Force -Scope CurrentUser
    Import-Module Az.Accounts
    Import-Module Az.Resources

    Connect-AzAccount

    Write-Host "Elevating access to root scope..."
    Invoke-AzRestMethod -Path "/providers/Microsoft.Authorization/elevateAccess?api-version=2015-07-01" -Method POST | Out-Null

    Write-Host "Assigning Reader role at root scope and Entra ID provider scope..."
    New-AzRoleAssignment -ObjectId $spObjectId -Scope "/" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"
    New-AzRoleAssignment -ObjectId $spObjectId -Scope "/providers/Microsoft.aadiam" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"

    Write-Host "Removing your own elevated root scope access..."
    $assignment = Get-AzRoleAssignment -RoleDefinitionId 18d7d88d-d35e-4fb5-a5c3-7773c20a72d9 | Where-Object { $_.Scope -eq "/" -and $_.SignInName -eq (Get-AzContext).Account.Id }
    Invoke-AzRestMethod -Path "$($assignment.RoleAssignmentId)?api-version=2018-07-01" -Method DELETE | Out-Null
}

# Create a client secret (valid for 6 months)
Write-Host "Creating client secret..."
$secret = Add-MgApplicationPassword -ApplicationId $appObjectId -PasswordCredential @{
    DisplayName   = "entraidappsecret"
    StartDateTime = (Get-Date).ToUniversalTime()
    EndDateTime   = (Get-Date).AddMonths(6).ToUniversalTime()
}

# Output app details
$tenantId = (Get-MgOrganization).Id
Write-Host "Tenant ID: $tenantId"
Write-Host "App ID: $appId"
Write-Host "Client Secret: $($secret.SecretText)"
