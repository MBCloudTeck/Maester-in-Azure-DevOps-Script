<#
DESCRIPTION:
This script:
  - Creates a new App Registration in Microsoft Entra ID (Azure AD).
  - Assigns required Microsoft Graph permissions.
  - Grants admin consent automatically.
  - Adds optional Exchange Online permissions.
  - Adds optional Azure RBAC permissions.
  - Generates a client secret valid for 6 months.
  - Outputs important information for future use.

REQUIREMENTS:
  - Microsoft Graph PowerShell Module installed.
  - Az PowerShell Module installed.
  - Connect to Microsoft Graph and Azure with necessary privileges.

BEGINNER GUIDE:
This script sets up an application that can access Microsoft Graph, optionally Exchange Online, and optionally Azure RBAC resources. The permissions let the app read various types of data like device management details, security policies, user authentication methods, Exchange configurations, and Azure configurations.
#>

# ====================
# USER CONFIGURATIONS
# ====================

# Enter a friendly name for your app registration.
$AppName = Read-Host "Enter a friendly name for the App Registration (e.g., 'MyEntraIDApp')"

# Do you want to add Exchange Online permissions? (yes/no)
$IncludeExchangePermissions = Read-Host "Include Exchange Online permissions? (yes/no)"

# Do you want to add Azure RBAC permissions? (yes/no)
$IncludeAzurePermissions = Read-Host "Include Azure RBAC permissions? (yes/no)"

# ==========================================

# Check Microsoft Graph connection
Write-Host "Checking connection to Microsoft Graph..."
try {
    $context = Get-MgContext
    if (-not $context.Account) { throw "Not connected." }
}
catch {
    Write-Error "Not connected to Microsoft Graph. Please run Connect-MgGraph and sign in."
    return
}

# Create a new App Registration
Write-Host "Creating app registration '$AppName'..."
$app = New-MgApplication -DisplayName $AppName
$appId = $app.AppId
$appObjectId = $app.Id
Write-Host "App registration created. App ID: $appId"

# Create Service Principal (used for permissions)
$sp = New-MgServicePrincipal -AppId $appId
$spObjectId = $sp.Id
Write-Host "Service principal created. Object ID: $spObjectId"

# Microsoft Graph's unique ID
$graphAppId = "00000003-0000-0000-c000-000000000000"
$graphSp = Get-MgServicePrincipal -Filter "AppId eq '$graphAppId'"

# Permissions required
$permissionsRequired = @(
    "DeviceManagementConfiguration.Read.All",
    "DeviceManagementManagedDevices.Read.All",
    "Directory.Read.All",
    "DirectoryRecommendations.Read.All",
    "IdentityRiskEvent.Read.All",
    "Policy.Read.All",
    "Policy.Read.ConditionalAccess",
    "PrivilegedAccess.Read.AzureAD",
    "Reports.Read.All",
    "RoleEligibilitySchedule.Read.Directory",
    "RoleManagement.Read.All",
    "SharePointTenantSettings.Read.All",
    "UserAuthenticationMethod.Read.All"
)

# Prepare permissions
Write-Host "Assigning permissions..."
$resourceAccessList = @()
foreach ($perm in $permissionsRequired) {
    $role = $graphSp.AppRoles | Where-Object { $_.Value -eq $perm -and $_.AllowedMemberTypes -contains "Application" }
    if ($role) {
        $resourceAccessList += [Microsoft.Graph.PowerShell.Models.MicrosoftGraphResourceAccess]@{
            Id   = $role.Id
            Type = "Role"
        }
    }
}

# Update app with permissions
$requiredResourceAccess = [Microsoft.Graph.PowerShell.Models.MicrosoftGraphRequiredResourceAccess]@{
    ResourceAppId  = $graphSp.AppId
    ResourceAccess = $resourceAccessList
}
Update-MgApplication -ApplicationId $appObjectId -RequiredResourceAccess @($requiredResourceAccess)
Write-Host "Permissions updated."

# Grant admin consent automatically
Write-Host "Granting admin consent..."
foreach ($perm in $permissionsRequired) {
    $role = $graphSp.AppRoles | Where-Object { $_.Value -eq $perm -and $_.AllowedMemberTypes -contains "Application" }
    if ($role) {
        New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $spObjectId -ResourceId $graphSp.Id -AppRoleId $role.Id -PrincipalId $spObjectId | Out-Null
        Write-Host "Admin consent granted for: $perm"
    }
}

# OPTIONAL: Add Exchange Online permissions
if ($IncludeExchangePermissions -eq "yes") {
    Write-Host "Adding Exchange Online permissions..."
    $exchangePerm = "Exchange.ManageAsApp"
    $exchangeSp = Get-MgServicePrincipal -Filter "DisplayName eq 'Office 365 Exchange Online'"
    $exchangeRole = $exchangeSp.AppRoles | Where-Object { $_.Value -eq $exchangePerm }

    if ($exchangeRole) {
        New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $spObjectId -ResourceId $exchangeSp.Id -AppRoleId $exchangeRole.Id -PrincipalId $spObjectId | Out-Null
        Write-Host "Exchange Online permissions granted: $exchangePerm"
        New-ServicePrincipal -AppId $appId -ObjectId $spObjectId -DisplayName $AppName
        New-ManagementRoleAssignment -Role "View-Only Configuration" -App $AppName
    }
    else { Write-Warning "Exchange Online permission ($exchangePerm) not found." }
}

# OPTIONAL: Add Azure RBAC permissions
if ($IncludeAzurePermissions -eq "yes") {
    Write-Host "Adding Azure RBAC permissions..."
    Install-Module Az.Accounts,Az.Resources -Force
    Connect-AzAccount
    Invoke-AzRestMethod -Path "/providers/Microsoft.Authorization/elevateAccess?api-version=2015-07-01" -Method POST | Out-Null
    New-AzRoleAssignment -ObjectId $spObjectId -Scope "/" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"
    New-AzRoleAssignment -ObjectId $spObjectId -Scope "/providers/Microsoft.aadiam" -RoleDefinitionName "Reader" -ObjectType "ServicePrincipal"
    $assignment = Get-AzRoleAssignment -RoleDefinitionId 18d7d88d-d35e-4fb5-a5c3-7773c20a72d9 | Where-Object { $_.Scope -eq "/" -and $_.SignInName -eq (Get-AzContext).Account.Id }
    Invoke-AzRestMethod -Path "$($assignment.RoleAssignmentId)?api-version=2018-07-01" -Method DELETE | Out-Null
}

# Output app details
Write-Host "Tenant ID: $((Get-MgOrganization).Id)"
Write-Host "App ID: $appId"
Write-Host "Client Secret: $(Add-MgApplicationPassword -ApplicationId $appObjectId -PasswordCredential @{DisplayName='secret';StartDateTime=(Get-Date);EndDateTime=(Get-Date).AddMonths(6)}).SecretText"
